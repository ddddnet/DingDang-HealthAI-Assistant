from zhipuai import ZhipuAI
import ast

client = ZhipuAI(api_key="228bed2a9d620d10a3fd5991496fd169.4GpCX1zeDFqVQmG2") # 填写您自己的APIKey

# 获取图片信息 输入图片链接 返回json数据
def ai_scarn_picture(img_url,user):
  text = '''
  假设你现在是一个图片分析大师，你学过健康营养与体育健身等相关知识，现在你的客户给你发了一张照片，请你判断图片属于下列哪种情况，并且按要求返回相关的json数据：
  1.若是食物
    识别此图片中的食物并估算其卡路里。请确保以 JSON 形式返回此结构中的内容。仅返回JSON数据，请勿包含其他内容。
    如果客户上传的不是真实的食物照片，例如动漫图片等，则返回{"msg":"fail","err_msg":"未识别到健康数据"}
    模板格式:
    例1：{"msg":"success","type":"food", "食品名字":"青椒肉片活力餐","食物分析":[{"食物名称":"青椒炒肉片","重量估算":"约300克","卡路里估算":"约250千卡","营养成分":{"蛋白质":"约20克","脂肪":"约15克","碳水化合物":"约10克"}}],"总重量估算":"青椒炒肉片(300克) = 300克","总卡路里估算":"250 = 250千卡","总营养成分估算":{"蛋白质":"20克","脂肪":"15克","碳水化合物":"10克"}}
    例2：{"msg":"success","type":"food", "食品名字":"丰盈经典全味餐","食物分析":[{"食物名称":"花卷馒头","重量估算":"约300克","卡路里估算":"约540千卡","营养成分":{"碳水化合物":"约100克","蛋白质":"约12克","脂肪":"约10克"}},{"食物名称":"炒肉片","重量估算":"约200克","卡路里估算":"约300千卡","营养成分":{"蛋白质":"约20克","脂肪":"约15克","碳水化合物":"约10克"}},{"食物名称":"炖猪脚","重量估算":"约200克","卡路里估算":"约500千卡","营养成分":{"脂肪":"约30克","蛋白质":"约25克","碳水化合物":"约10克"}},{"食物名称":"煎豆腐","重量估算":"约100克","卡路里估算":"约150千卡","营养成分":{"蛋白质":"约8克","脂肪":"约12克","碳水化合物":"约2克"}},{"食物名称":"蔬菜沙拉","重量估算":"约200克","卡路里估算":"约50千卡","营养成分":{"膳食纤维":"约5克","维生素A":"约200微克","维生素C":"约50毫克"}}],"总重量估算":"花卷馒头(300克) + 炒肉片(200克) + 炖猪脚(200克) + 煎豆腐(100克) + 蔬菜沙拉(200克) = 1000克","总卡路里估算":"540 + 300 + 500 + 150 + 50 = 1540千卡","总营养成分估算":{"脂肪":"57克","蛋白质":"65克","碳水化合物":"122克"}}
    例3：{"msg":"success","type":"food", "食品名字":"鲜果维C活力餐","食物分析":[{"食物名称":"橘子","重量估算":"约100克","卡路里估算":"约45千卡","营养成分":{"碳水化合物":"约12克","维生素C":"约31毫克","膳食纤维":"约1克"}}],"总重量估算":"橘子(100克) = 100克","总卡路里估算":"45 = 45千卡","总营养成分估算":{"碳水化合物":"12克","维生素C":"31毫克","膳食纤维":"1克"}}
    
  2.若是运动软件截图
    识别此图片中的运动软件，并估算其消耗的卡路里。请确保以 JSON 形式返回此结构中的内容。仅返回JSON数据，请勿包含其他内容。
    模板格式:
    例：{"msg":"success","type":"sport","运动时长":"00:33:59", "总消耗卡路里":"200", "单位":"千卡"}
    例：{"msg":"success","type":"sport","运动时长":"01:20:55", "总消耗卡路里":"500", "单位":"千卡"}
    
  3.若是体重数据
    识别此图片中的体重数据。请确保以 JSON 形式返回此结构中的内容。仅返回JSON数据，请勿包含其他内容。
    模板格式:
    例1：{"msg":"success","type":"weight","体重":"60","单位":"公斤"}
    例2：{"msg":"success","type":"weight","体重":"105","单位":"斤"}
    
  4.若是其他情况
    请确保以 JSON 形式返回此结构中的内容。仅返回JSON数据，请勿包含其他内容。
    输出：{"msg":"fail","err_msg":"未识别到健康数据"}
  '''

  response = client.chat.completions.create(
      model="glm-4v-flash",
      user_id=user,
      response_format={
          'type': 'json_object'
      },
      messages=[
        {
          "role": "user",
          "content": [
            {
              "type": "text",
              "text": text
            },
            {
              "type": "image_url",
              "image_url": {
                  "url" : img_url
              }
            }
          ]
        }
      ]
  )
  result = response.choices[0].message.content
  new_result = ast.literal_eval(result)
  return new_result

# 营养小助手 输入食物的json数据 返回分析报告（纯文本markdown格式）
def ai_nutrition_assistant(json_data):
  role_data = '''
    - Role: 营养健康分析师
    - Background: 用户需要对其日常饮食摄入进行详细分析。
    - Profile: 你是一位专业的营养健康分析师，根据提供的数据进行分析。
    - Skills: 你擅长解读饮食摄入数据，提供针对性的营养改进建议。
    - Goals: 提供清晰的饮食摄入分析，帮助用户识别营养摄入的关键点，并制定饮食调整计划。
    - Constrains: 分析应基于实际饮食数据，确保建议科学、准确且实用。
    - OutputFormat: 提供包含卡路里、脂肪、蛋白质和碳水化合物摄入量的详细分析报告。生成的内容必须按照Examples的排版和格式生成，也必须包含emoji,输出的内容为纯文本,不要包含其他与模板无关的内容，如：“分析报告如下：”。
    - Workflow:
      1. 根据用户提供的饮食信息（json数据），若已提供，则直接使用：json数据 ；若未提供，则请求用户提供。
      2. 分析用户的饮食摄入数据，包括卡路里、脂肪、蛋白质和碳水化合物的摄入量。
      3. 结合用户的饮食摄入数据，提供个性化的饮食建议。
      4. 根据用户当日的饮食情况，提供第二天的饮食建议。
      5.用户的食品可能有很多种类，在下列模板中都展现出来，在"食物分析"这个数列里面每一项都提取出来。

    - Examples:
      - 例子1：系统帮用户分析了食物，生成了以下json数据：{"食品名字":"青椒肉片活力餐","食物分析":[{"食物名称":"青椒炒肉片","重量估算":"约300克","卡路里估算":"约250千卡","营养成分":{"蛋白质":"约20克","脂肪":"约15克","碳水化合物":"约10克"}}],"总重量估算":"青椒炒肉片(300克) = 300克","总卡路里估算":"250 = 250千卡","总营养成分估算":{"蛋白质":"20克","脂肪":"15克","碳水化合物":"10克"}}

        👩🏻‍🔬 **营养怪博士** 👩🏻‍🔬
        
        - 食物卡路里：250千卡
        - 食物重量：300克
        - 食物名称：青椒炒肉片
        - 蛋白质总量：20克
        - 脂肪总量：15克
        - 碳水化合物总量：10克
        - 美味秘诀：青椒炒肉片富含蛋白质和脂肪，热量适中，适合作为日常正餐的一道菜。青椒富含维生素C，有助于增强免疫力，而肉片提供优质蛋白质，有助于肌肉修复和生长。建议每周食用3 - 4次，搭配富含膳食纤维的蔬菜，营养更均衡。
        ---
        🌶️ 青椒炒肉片 🌶️
        - 份量：300克
        - 能量站：250千卡
        - 蛋白质小助手：20克
        - 脂肪小怪兽：15克
        - 碳水化合物小精灵：10克

    若用户未提供个人身体信息，则输出：
    🌟 尚未提供数据
  '''
  
  response = client.chat.completions.create(
      model="glm-4-flash",
      # response_format={
      #     'type': 'json_object'
      # },
      top_p= 0.7,
      temperature= 0.95,
      stream=False,
      tools = [{"type":"web_search","web_search":{"search_result":True}}],
      messages=[
        {
          "role": "system",
          "content": role_data
        },
        {
          "role": "user",
          "content": [
            {
              "type": "text",
              "text": json_data
            }
            
          ]
        }
      ]
  )
  
  return response.choices[0].message.content

# 食物分析 输入食物json数据 返回营养成份（纯文本markdown格式）
def ai_analyse_food(json_data):
  role_data = '''
    接下来我将提供一些json数据，你中提取某些信息并输出为文本
    例如：
    {"msg":"success","type":"food", "食品名字":"丰盈经典全味餐","食物分析":[{"食物名称":"花卷馒头","重量估算":"约300克","卡路里估算":"约540千卡","营养成分":{"碳水化合物":"约100克","蛋白质":"约12克","脂肪":"约10克"}},{"食物名称":"炒肉片","重量估算":"约200克","卡路里估算":"约300千卡","营养成分":{"蛋白质":"约20克","脂肪":"约15克","碳水化合物":"约10克"}},{"食物名称":"炖猪脚","重量估算":"约200克","卡路里估算":"约500千卡","营养成分":{"脂肪":"约30克","蛋白质":"约25克","碳水化合物":"约10克"}},{"食物名称":"煎豆腐","重量估算":"约100克","卡路里估算":"约150千卡","营养成分":{"蛋白质":"约8克","脂肪":"约12克","碳水化合物":"约2克"}},{"食物名称":"蔬菜沙拉","重量估算":"约200克","卡路里估算":"约50千卡","营养成分":{"膳食纤维":"约5克","维生素A":"约200微克","维生素C":"约50毫克"}}],"总重量估算":"花卷馒头(300克) + 炒肉片(200克) + 炖猪脚(200克) + 煎豆腐(100克) + 蔬菜沙拉(200克) = 1000克","总卡路里估算":"540 + 300 + 500 + 150 + 50 = 1540千卡","总营养成分估算":{"脂肪":"57克","蛋白质":"65克","碳水化合物":"122克"}}

    从这段json数据中提取‘食物分析’
    输出为以下格式：
    食物分析：
    1. 花卷馒头
      - 重量估算：约300克
      - 卡路里估算：约540千卡
      - 营养成分：
        - 碳水化合物：约100克
        - 蛋白质：约12克
        - 脂肪：约10克
    2. 炒肉片
      - 重量估算：约200克
      - 卡路里估算：约300千卡
      - 营养成分：
        - 蛋白质：约20克
        - 脂肪：约15克
        - 碳水化合物：约10克
    3. 炖猪脚
      - 重量估算：约200克
      - 卡路里估算：约500千卡
      - 营养成分：
        - 脂肪：约30克
        - 蛋白质：约25克
        - 碳水化合物：约10克
    4. 煎豆腐
      - 重量估算：约100克
      - 卡路里估算：约150千卡
      - 营养成分：
        - 蛋白质：约8克
        - 脂肪：约12克
        - 碳水化合物：约2克
    5. 蔬菜沙拉
      - 重量估算：约200克
      - 卡路里估算：约50千卡
      - 营养成分：
        - 膳食纤维：约5克
        - 维生素A：约200微克
        - 维生素C：约50毫克
    6. 总重量估算
      - 花卷馒头(300克) + 炒肉片(200克) + 炖猪脚(200克) + 煎豆腐(100克) + 蔬菜沙拉(200克) = 1000克
    7. 总卡路里估算
      - 540 + 300 + 500 + 150 + 50 = 1540千卡
    8. 总营养成分估算
      - 脂肪：57克
      - 蛋白质：65克
      - 碳水化合物：122克

    实际数据可能会有所变动，请你根据实际情况调整输出格式。
  '''
  
  response = client.chat.completions.create(
      model="glm-4-flash",
      # response_format={
      #     'type': 'json_object'
      # },
      top_p= 0.7,
      temperature= 0.95,
      stream=False,
      tools = [{"type":"web_search","web_search":{"search_result":True}}],
      messages=[
        {
          "role": "system",
          "content": role_data
        },
        {
          "role": "user",
          "content": [
            {
              "type": "text",
              "text": json_data
            }
            
          ]
        }
      ]
  )
  
  return response.choices[0].message.content

# 食物总营养成份估算 返回文本
def ai_analyse_all_nutrition(json_data):
  role_data = '''
  从json数据中提取营养信息，并且根据食物热量缺口原则，结合个人信息分析，判断是否热量超标
  输出为以下格式：
  蛋白质：20克
  脂肪：15克
  碳水化合物：10克

  实际数据可能会有所变动，但是在‘蛋白质’、‘脂肪’、‘碳水化合物’、‘膳食纤维’范围内,如未提及的物质不用写出来，请你根据实际情况调整输出格式。
  
  要求：不允许输出空格，且不允许输出多余的内容。
  '''
  
  response = client.chat.completions.create(
      model="glm-4-flash",
      # response_format={
      #     'type': 'json_object'
      # },
      top_p= 0.7,
      temperature= 0.95,
      stream=False,
      tools = [{"type":"web_search","web_search":{"search_result":True}}],
      messages=[
        {
          "role": "system",
          "content": role_data
        },
        {
          "role": "user",
          "content": [
            {
              "type": "text",
              "text": json_data
            }
            
          ]
        }
      ]
  )
  
  return response.choices[0].message.content

# 报表数据 返回json数据
def healthy_data_count(user_combin,json_data):
  role_data = '''
    个人信息:''' + user_combin + ''',
    json数据:''' + json_data + ''',
    从json数据中提取营养信息，并且根据食物热量缺口原则，结合个人信息分析，判断是否热量超标
    输出为以下格式：
    {
      "基础代谢":1560,
      "体重":50.3,
      "是否超标":true,
      "进食顿数":1,
      "摄入卡路里":600,
      "碳水":10,
      "蛋白质":15,
      "脂肪":5,
      "膳食纤维":10
    }

    实际数据会有所变动，根据json数据统计分析，‘蛋白质’默认单位为卡，‘脂肪’、‘碳水化合物’、‘膳食纤维’单位为克,如json未提及的物质直接返回为0。
    若没有进食数据，进食顿数为0
    要求：输出为json格式。
      
  '''
  
  response = client.chat.completions.create(
      model="glm-4-flash",
      response_format={
          'type': 'json_object'
      },
      top_p= 0.7,
      temperature= 0.95,
      stream=False,
      tools = [{"type":"web_search","web_search":{"search_result":True}}],
      messages=[
        {
          "role": "system",
          "content": role_data
        },
        {
          "role": "user",
          "content": [
            {
              "type": "text",
              "text": json_data
            }
            
          ]
        }
      ]
  )
  
  return response.choices[0].message.content

# 健康报告
def healthy_report(user_combin,json_data):
  role_data = '''
    个人信息:''' + user_combin + ''',
    json数据:''' + json_data + ''',
    假如你是一名专业的健身教练，你熟练掌握16+8饮食法则以及各种减肥知识，现在我提供了我的个人信息以及健康软件导出的json记录数据，请你根据你的专业知识，给我提供建议，请你以报告的形式返回给我。
    要求：
      - 根据16+8法则，以及进食时间给出分析以及建议。
      - 判断饮食热量以及运动消耗热量总和是否符合热量缺口原则达到减肥目的。
      - 给出明日饮食结构，以及符合16+8法则的进食时间，时间在json数据里面是时间戳。
      - 不要出现假大空的总结，不要以写信的格式，按照正式报表的形式。
      - 报表里加上emoji表情，让报表符合小红书风格
      - 报表名字为：食光机报告🚀
      
  '''
  
  response = client.chat.completions.create(
      model="glm-4-flash",
      # response_format={
      #     'type': 'json_object'
      # },
      top_p= 0.7,
      temperature= 0.95,
      stream=False,
      tools = [{"type":"web_search","web_search":{"search_result":True}}],
      messages=[
        {
          "role": "system",
          "content": role_data
        },
        {
          "role": "user",
          "content": [
            {
              "type": "text",
              "text": json_data
            }
            
          ]
        }
      ]
  )
  
  return response.choices[0].message.content

